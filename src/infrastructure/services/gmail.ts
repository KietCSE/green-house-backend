import nodemailer from "nodemailer";
import config from "../../config/load-config";
import { NotificationData } from "../../presentation/dtos/notification";
import { Condition, Configuration, Device } from "@prisma/client";

export class EmailService {

    public async SendEmail(monitor: NotificationData, email: string) {

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: config.EMAIL_USER as string,
                pass: config.EMAIL_PWD as string,
            },
        });

        const mailOptions: nodemailer.SendMailOptions = {
            from: `"Green Hourse System" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: `‚ö†Ô∏è C·∫£nh b√°o: ${monitor.monitoringSubject.name} v∆∞·ª£t ng∆∞·ª°ng!`,
            html: `
                <h2>üîî C·∫£nh b√°o t·ª´ h·ªá th·ªëng</h2>
                <p><strong>ƒê·ªëi t∆∞·ª£ng quan tr·∫Øc:</strong> ${monitor.monitoringSubject.name}</p>
                <p><strong>Gi√° tr·ªã hi·ªán t·∫°i:</strong> ${monitor.notification.value} ${monitor.monitoringSubject.unit}</p>
                <p><strong>Ng∆∞·ª°ng c·∫£nh b√°o d∆∞·ªõi:</strong> ${monitor.monitoringSubject.alertlowerbound} ${monitor.monitoringSubject.unit}</p>
                <p><strong>Ng∆∞·ª°ng c·∫£nh b√°o tr√™n:</strong> ${monitor.monitoringSubject.alertupperbound} ${monitor.monitoringSubject.unit}</p>
                <p><strong>Mi√™u t·∫£:</strong> ${monitor.monitoringSubject.alertDes}</p>
                <p><strong>Th·ªùi gian:</strong> ${new Date(monitor.notification.date).toLocaleString()}</p>
            `,
        };

        try {
            console.log(email)
            const info = await transporter.sendMail(mailOptions);
            console.log("Email sent successfully:", info.response);
        } catch (error) {
            console.error("Error occurred:", error);
        }

    }

    public async SendEmailConfig(value: number, device: Device, configAuto: Configuration, condition: Condition, email: string) {

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: config.EMAIL_USER as string,
                pass: config.EMAIL_PWD as string,
            },
        });

        const mailOptions: nodemailer.SendMailOptions = {
            from: `"Green Hourse System" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: `‚ö†Ô∏è C·∫£nh b√°o: ƒê·ªôi t∆∞·ª£ng quan tr·∫Øc ${condition.sensorId} v∆∞·ª£t ng∆∞·ª°ng!`,
            html: `
                <h2 style="color: red;">üîî C·∫£nh b√°o t·ª´ h·ªá th·ªëng Green House</h2>
                <p><strong>Thi·∫øt b·ªã:</strong> ${device.name}</p>
                <p><strong>M√¥ t·∫£ thi·∫øt b·ªã:</strong> ${device.description || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>M√¥ t·∫£ c·∫•u h√¨nh:</strong> ${configAuto.description || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>M√¥ t·∫£ ƒëi·ªÅu ki·ªán:</strong> ${condition.description || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>ƒêi·ªÅu ki·ªán k√≠ch ho·∫°t:</strong> ${value} ${condition.condition} ${condition.threshold}</p>
                <p><strong>Gi√° tr·ªã hi·ªán t·∫°i:</strong> ${value}</p>
                <p><strong>Th·ªùi gian ph√°t hi·ªán:</strong> ${new Date().toLocaleString()}</p>
                <hr/>
                <h3>C√°c h√†nh ƒë·ªông ti·∫øp theo:</h3>
                <ul>
                    <li>Vui l√≤ng ki·ªÉm tra t√¨nh tr·∫°ng thi·∫øt b·ªã.</li>
                    <li>Ki·ªÉm tra c√°c y·∫øu t·ªë m√¥i tr∆∞·ªùng ho·∫∑c h·ªá th·ªëng c·ªßa thi·∫øt b·ªã.</li>
                </ul>
                <p><em>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi tr·ª±c ti·∫øp!</em></p>
            `,
        };

        try {
            console.log(email)
            const info = await transporter.sendMail(mailOptions);
            console.log("Email sent successfully:", info.response);
        } catch (error) {
            console.error("Error occurred:", error);
        }

    }
}



