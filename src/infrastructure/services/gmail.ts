import nodemailer from "nodemailer";
import config from "../../config/load-config";
import { NotificationInfo } from "../../presentation/dtos/notification";
// import { Condition, Configuration, Device } from "@prisma/client";
import { NotificationDevice, NotificationSchedule } from "../../presentation/dtos/notification-device";
import prisma from '../../config/prisma-config'


export class EmailService {

    public async SendEmailToAllUser(monitor: NotificationInfo, htmlText?: string) {
        const listemail = await prisma.user.findMany({
            where: { receiveNotification: true },
            select: { email: true }
        })
        listemail
            .map(e => e.email)
            .filter(e => !!e)
            .forEach(e => {
                this.SendEmail(monitor, e, htmlText)
            })
    }

    private async SendEmail(monitor: NotificationInfo, email: string, htmlText?: string) {

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: config.EMAIL_USER as string,
                pass: config.EMAIL_PWD as string,
            },
        });

        const mailOptions: nodemailer.SendMailOptions = {
            from: `"Green House System" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: `‚ö†Ô∏è C·∫£nh b√°o: ${monitor.getName()} v∆∞·ª£t ng∆∞·ª°ng!`,
            html: htmlText ? htmlText :
                `
                    <h2>üîî C·∫£nh b√°o t·ª´ h·ªá th·ªëng</h2>
                    <p><strong>ƒê·ªëi t∆∞·ª£ng quan tr·∫Øc:</strong> ${monitor.getName()}</p>
                    <p><strong>Gi√° tr·ªã hi·ªán t·∫°i:</strong> ${monitor.getValue()} ${monitor.getUnit()}</p>
                    <p><strong>Ng∆∞·ª°ng c·∫£nh b√°o d∆∞·ªõi:</strong> ${monitor.getLowerbound()} ${monitor.getUnit()}</p>
                    <p><strong>Ng∆∞·ª°ng c·∫£nh b√°o tr√™n:</strong> ${monitor.getUpperbound()} ${monitor.getUnit()}</p>
                    <p><strong>Mi√™u t·∫£:</strong> ${monitor.getDes()}</p>
                    <p><strong>Th·ªùi gian:</strong> ${new Date(monitor.getDate()).toLocaleString()}</p>
                `,
        };

        try {
            const info = await transporter.sendMail(mailOptions);
            console.log("Email sent successfully:", info.response);
        } catch (error) {
            console.error("Error occurred:", error);
        }

    }

    public async SendEmailConfigToAllUser(data: NotificationDevice) {
        const listemail = await prisma.user.findMany({
            where: { receiveNotification: true },
            select: { email: true }
        })
        listemail
            .map(e => e.email)
            .filter(e => !!e)
            .forEach(e => {
                this.SendEmailConfig(data, e)
            })
    }

    public async SendEmailConfig(data: NotificationDevice, email: string) {

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: config.EMAIL_USER as string,
                pass: config.EMAIL_PWD as string,
            },
        });

        const mailOptions: nodemailer.SendMailOptions = {
            from: `"Green Hourse System" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: `‚ö†Ô∏è C·∫£nh b√°o: K√≠ch ho·∫°t c·∫•u h√¨nh t·ª± ƒë·ªông!`,
            html: `
                <h2 style="color: red;">üîî C·∫£nh b√°o t·ª´ h·ªá th·ªëng Green House</h2>
                <p><strong>Thi·∫øt b·ªã:</strong> ${data.getDeviceName()}</p>
                <p><strong>M√¥ t·∫£ thi·∫øt b·ªã:</strong> ${data.getDeviceDescription() || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>M√¥ t·∫£ c·∫•u h√¨nh:</strong> ${data.getConfigDescription() || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>M√¥ t·∫£ ƒëi·ªÅu ki·ªán:</strong> ${data.getConditionDescription() || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>ƒêi·ªÅu ki·ªán k√≠ch ho·∫°t:</strong> gi√° tr·ªã ${data.getOperator()} ${data.getThreshold()}</p>
                <p><strong>Gi√° tr·ªã hi·ªán t·∫°i:</strong> ${data.getValue()}</p>
                <p><strong>Th·ªùi gian ph√°t hi·ªán:</strong> ${new Date().toLocaleString()}</p>
                <hr/>
                <h3>C√°c h√†nh ƒë·ªông ti·∫øp theo:</h3>
                <ul>
                    <li>Vui l√≤ng ki·ªÉm tra t√¨nh tr·∫°ng thi·∫øt b·ªã.</li>
                    <li>Ki·ªÉm tra c√°c y·∫øu t·ªë m√¥i tr∆∞·ªùng ho·∫∑c h·ªá th·ªëng c·ªßa thi·∫øt b·ªã.</li>
                </ul>
                <p><em>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi tr·ª±c ti·∫øp!</em></p>
            `,
        };

        try {
            console.log(email)
            const info = await transporter.sendMail(mailOptions);
            console.log("Email sent successfully:", info.response);
        } catch (error) {
            console.error("Error occurred:", error);
        }

    }

    public async SendEmailScheduleToAllUser(data: NotificationSchedule) {
        const listemail = await prisma.user.findMany({
            where: { receiveNotification: true },
            select: { email: true }
        })
        listemail
            .map(e => e.email)
            .filter(e => !!e)
            .forEach(e => {
                this.SendEmailSchedule(data, e)
            })
    }

    public async SendEmailSchedule(data: NotificationSchedule, email: string) {

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: config.EMAIL_USER as string,
                pass: config.EMAIL_PWD as string,
            },
        });

        const mailOptions: nodemailer.SendMailOptions = {
            from: `"Green Hourse System" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: `‚ö†Ô∏è C·∫£nh b√°o: K√≠ch ho·∫°t c·∫•u h√¨nh l·ªãch h·∫πn!`,
            html: `
                <h2 style="color: red;">üîî C·∫£nh b√°o t·ª´ h·ªá th·ªëng Green House</h2>
                <p><strong>Thi·∫øt b·ªã:</strong> ${data.getDeviceName()}</p>
                <p><strong>M√¥ t·∫£ thi·∫øt b·ªã:</strong> ${data.getDeviceDescription() || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>M√¥ t·∫£ c·∫•u h√¨nh:</strong> ${data.getConfigDescription() || "Ch∆∞a c√≥ m√¥ t·∫£"}</p>
                <p><strong>Th·ªùi gian b·∫Øt ƒë·∫ßu:</strong> ${data.getScheduleStart()}</p>
                <p><strong>Th·ªùi gian k·∫øt th√∫c:</strong> ${data.getScheduleEnd()}</p>
                <p><strong>Th·ªùi gian l·∫∑p l·∫°i:</strong> ${data.getRepetition()}</p>
                <hr/>
                <h3>C√°c h√†nh ƒë·ªông ti·∫øp theo:</h3>
                <ul>
                    <li>Vui l√≤ng ki·ªÉm tra t√¨nh tr·∫°ng thi·∫øt b·ªã.</li>
                    <li>Ki·ªÉm tra c√°c y·∫øu t·ªë m√¥i tr∆∞·ªùng ho·∫∑c h·ªá th·ªëng c·ªßa thi·∫øt b·ªã.</li>
                </ul>
                <p><em>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi tr·ª±c ti·∫øp!</em></p>
            `,
        };

        try {
            console.log(email)
            const info = await transporter.sendMail(mailOptions);
            console.log("Email sent successfully:", info.response);
        } catch (error) {
            console.error("Error occurred:", error);
        }

    }
}



