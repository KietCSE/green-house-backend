openapi: 3.0.0
info:
  title: User API
  description: API for user authentication
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
tags:
  - name: notification
    description: Endpoints related to monitoring notifications
  - name: user
    description: Endpoints related to user authentication
paths:
  /notification/all:
    get:
      tags:
        - notification
      summary: Get all notifications
      description: Retrieve all monitoring notifications along with their associated monitor details.
      responses:
        "200":
          description: A list of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        date:
                          type: string
                          format: date-time
                          example: "2023-10-01T10:00:00.000Z"
                        value:
                          type: number
                          example: 90
                        monitoringSubjectId:
                          type: integer
                          example: 1
                        monitor:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: "Temperature"
                            description:
                              type: string
                              example: "Measures the ambient temperature in degrees Celsius"
                            upperbound:
                              type: number
                              example: 100
                            lowerbound:
                              type: number
                              example: 0
        "500":
          description: Server error

  /user/login:
    post:
      tags:
        - user
      summary: User login
      description: Authenticate a user and return user details on successful login, response ưith jwt token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "koko"
                password:
                  type: string
                  format: password
                  example: "123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "koko"
                      email:
                        type: string
                        format: email
                        example: "kiet@gmail.com"
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywidXNlcm5hbWUiOiJ0dWFua2lldCIsImVtYWlsIjoiZ2lveHVhbmh1dXlob2FkYW9sYXlAZ21haWwuY29tIiwiaWF0IjoxNzQ0NDMzMjM5LCJleHAiOjE3NDQ0MzY4Mzl9.QWRY5HVN06o4E6OaPaiHxy9aMczGsjEgIXdoRH4T8Dg"
                  message:
                    type: string
                    example: "Login successfully"
        "401":
          description: Unauthorized - Invalid credentials
        "500":
          description: Server error

  /user/register:
    post:
      tags:
        - user
      summary: User registration
      description: Register a new user with a username, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "koko"
                password:
                  type: string
                  format: password
                  example: "123"
                email:
                  type: string
                  format: email
                  example: "kiet@gmail.com"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
        "409":
          description: User already exists or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    enum: ["User already exists", "Email already exists"]
                    example: "User already exists or email already exists"
        "500":
          description: Server error


  /user/notification:
    patch:
      summary: Cập nhật tùy chọn nhận thông báo hoặc không của người dùng (sử dụng jwt)
      tags:
        - user
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: boolean
              required:
                - value
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Update notification of user to true
        '400':
          description: Cập nhật thất bại
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Update notification of user to true
